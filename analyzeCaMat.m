%{
% analyzeCaMat.m
%
% PURPOSE: Generate figures and find number of frames > M*STD for .mat data
% generated by analyzeCaImages.m
%
% INPUTS: See CONTROLS section.
%
% OUTPUTS: Two tiledchart figures and six workspace variables: 
%   After = After drift correction
%   Before = Before drift correction
%   - After_multSTDbaseline and Before_multSTDbaseline
%       -- stdMult*MBDIFF_baseStd. Each row is a single cell, each column
%           is a single stimulus. Used as threshold for nFramesGreater variables.
%
%   - After_nFramesGreater and Before_nFramesGreater
%       -- For before and after drift correction, the number of frames
%           greater than stdMult*std for this cell within stim bounds. Each row is a single cell. 
%           Each column is a single stimulus.
%       -- Uses dataStruct.stimTable columns 1 and 2 for bounds (in
%           workspace as stimArray)
%
%   - After_nFramesGreater_percent and Before_nFramesGreater_percent
%       -- As above, but expressed as a percent of the total number of
%           frames for this cell/stimulus combination (rather than raw
%           number of frames). Expressed between 0 and 1 (so 0.5 = 50%).
%
% DEPENDENCIES: Basic MATLAB install (built/tested on R2021b but may work
% 	on earlier versions).
%
% AUTHOR: David C Alston (david.alston@louisville.edu) June 2022.
%
% NOTES:
%}
clc
close all
clear
addpath(genpath('Functions'));
%% CONTROLS
stdMult = 5; % Multiplier for standard deviation. Finding MBDIFF_dF_F frames > (stdMult*stddev). Can be any positive nonzero number.
%% Check input controls are valid
if stdMult <= 0; beep; disp('ERROR:: Invalid STD multiplier. Check sdMult control'); return; end
%% Load mat from file
[file, path] = uigetfile("*.mat");
if file == 0; return; end
load(fullfile(path, file)); % Loaded as 'dataStruct' (as of june 2nd 2022)
%% Check mat is correct type (was generated by analyzeCaImages.m)
try
    temp = dataStruct.driftFactor;
catch
    beep;
    disp('ERROR:: Mat has invalid format. Be sure this .mat file was generated by analyzeCaImages.m and not another script');
    return
end
clearvars temp
%% Do per cell/stimulus plotting and processing
numCells = numel(dataStruct.ROIdata);
numStim = size(dataStruct.stimTable, 1);
After_multSTDbaseline = NaN(numCells, numStim);
Before_multSTDbaseline = NaN(numCells, numStim);
After_nFramesGreater = NaN(numCells, numStim);
Before_nFramesGreater =  NaN(numCells, numStim);
After_nFramesGreater_percent = NaN(numCells, numStim);
Before_nFramesGreater_percent =  NaN(numCells, numStim);
stimArray = table2array(dataStruct.stimTable);
figure;
tiledHandleAfter = tiledlayout('flow');
figure;
tiledHandleBefore = tiledlayout('flow');
title(tiledHandleAfter, ['After_Drift_MBDIFF_dF_F for all cells-', file], 'Interpreter', 'none');
title(tiledHandleBefore,  ['Before_Drift_MBDIFF_dF_F for all cells-', file], 'Interpreter', 'none');
for cCell = 1:numCells
    cC = dataStruct.ROIdata(cCell); % cC = current cell struct
    %% AfterDrift tiled plot
    nexttile(tiledHandleAfter);
    plot(cC.After_Drift_MBDIFF_dF_F);
    title(['Cell', ' ', num2str(cCell)]);
    %% BeforeDrift tiled plot
    nexttile(tiledHandleBefore);
    plot(cC.Before_Drift_MBDIFF_dF_F);
    title(['Cell', ' ', num2str(cCell)]);
    %% Populate std baseline and multiplier*std baseline
    After_multSTDbaseline(cCell, :) = stdMult*cC.After_Drift_MBDIFF_baseStd;
    Before_multSTDbaseline(cCell, :) = stdMult*cC.Before_Drift_MBDIFF_baseStd;
    %% Count frames greater than multSDbaseline (both before and after)
    After_dF_F = cC.After_Drift_MBDIFF_dF_F;
    Before_dF_F = cC.Before_Drift_MBDIFF_dF_F;
    for cStim = 1:numStim
        afterThresh = After_multSTDbaseline(cCell, cStim);
        beforeThresh = Before_multSTDbaseline(cCell, cStim);
        sSIdx = stimArray(cStim, 1); % Stim start IDX. Only looking between say index 80 and 120 (for stim number cStim)
        sEIdx = stimArray(cStim, 2); % Stim end IDX
        After_nFramesGreater(cCell, cStim) = numel(find(After_dF_F(sSIdx:sEIdx) > afterThresh));
        Before_nFramesGreater(cCell, cStim) = numel(find(Before_dF_F(sSIdx:sEIdx) > beforeThresh));
        After_nFramesGreater_percent(cCell, cStim) = After_nFramesGreater(cCell, cStim) / numel(After_dF_F(sSIdx:sEIdx));
        Before_nFramesGreater_percent(cCell, cStim) = Before_nFramesGreater(cCell, cStim) / numel(Before_dF_F(sSIdx:sEIdx));
    end
end
%% Grab some extra info for workspace
driftFactor = dataStruct.driftFactor;
stimTable = dataStruct.stimTable;
dateMatGenerated = dataStruct.processedDate;
%% Finished. Cleanup and display info to command window.
clearvars dataStruct C cC afterThresh beforeThresh After_dF_F Before_dF_F cCell cStim stimTable
fprintf('Finished. Used stdMult = %f for After_multSTDBaseline and Before_multSTDbaseline\n', stdMult);
fprintf('For data in workspace, each row is a new cell. Each column is a new stimulus\n');
fprintf('In Workspace, see stimArray columns 1 and 2 for bounds used with finding frames > stdMult*STD\n');
fprintf(['To look at individual cells, in the Figure window go to \nView -> Plot browser. ' ...
    'Turn off whatever cells you want, then you can resize any remaining plots as needed \n']);
fprintf('You can shift select multiple entries in the Plot Browser at once, then click Hide\n');